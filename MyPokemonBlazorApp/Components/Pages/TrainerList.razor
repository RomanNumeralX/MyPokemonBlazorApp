@page "/Trainers"
@rendermode InteractiveServer      
@* ALLOWS INTERACTIVITY COMMENT*@
@inject DatabaseContext DbContext    
@inject NavigationManager NavigationManager


<div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShowAddTrainer">
            Add Trainer
        </button>
    </div>
</div>


@if (showForm)
{

    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">
                @(model.Id == 0 ? "AddTrainer" : "Edit Trainer")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">

                    <div class="col-md-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" placeholder="Name" @bind-Value="model.Name" />
                        <ValidationMessage For="@(() => model.Name)" />
                    </div>

                    
                    
                 @* 
                     <div class="col-md-3">
                        <label for="companion" class="form-label">Companion ID</label>
                        <InputNumber class="form-control" placeholder="Companion" @bind-Value="model.Companion" /> 
                        <ValidationMessage For="@(() => model.Companion)" />
                    </div>  
                 *@


                    <div class="dropdown">
                        <label for="companion" class="form-label">Companion</label>
                        <br />
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Dropdown button
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var pokemon in pokemons)  @*pokemons is now available because i mentioned it in private <Pokemons> list thing*@
                            {
                                <li><a class="dropdown-item">@pokemon.Name</a></li>
                            }
                        </ul>
                    </div>
                    

                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary float-end">
                            @(model.Id == 0 ? "AddTrainer" : "Edit Trainer")
                        </button>
                    </div>

                </div>
            </EditForm>
        </div>

    </div>

}

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Companion ID</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        
        @foreach(var trainer in trainers)
        {
            <tr>

                <td>@trainer.Id</td>
                <td>@trainer.Name</td>
                <td>@trainer.Companion</td>


                <td>
                    <button class="btn btn-success" @onclick = "() => Edit(trainer)">Edit</button>
                </td>

                <td>
                    <button class="btn btn-danger" @onclick = "() => Delete(trainer)">Delete</button>
                </td>

            </tr>
        }
    </tbody>
</table>

@code {
    private List<Trainer>? trainers;
    private List<Pokemon>? pokemons;
    private EditContext editContext;
    public Trainer model;
    private bool showForm;

    private void ShowAddTrainer()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        showForm = true;
    }

    private void Edit(Trainer trainer)
    {
        model = trainer;
        editContext = new EditContext(model);
        showForm = true;
    }

    private async void Submit()
    {
        if (model.Id == 0)
            DbContext.Trainers.Add(model);
        else
            DbContext.Trainers.Update(model);

        await DbContext.SaveChangesAsync();  
    @* issue here, as foreign key isn't being inputted either *@
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        pokemons = await DbContext.Pokemons.ToListAsync();
        await Refresh();
    }

    private async Task Refresh()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        trainers = await DbContext.Trainers.ToListAsync();
    }

    private async Task Delete(Trainer trainer)
    {
        DbContext.Trainers.Remove(trainer);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }

}


